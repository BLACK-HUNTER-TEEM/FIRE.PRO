import base64
exec(base64.b64decode("I2NvZGluZz11dGYtOA0KIyEvdXNyL2Jpbi9weXRob24zDQppbXBvcnQgcmVxdWVzdHMsYnM0LHN5cyxvcyxyYW5kb20sdGltZSxyZSxqc29uLHV1aWQsc3VicHJvY2VzcyxwbGF0Zm9ybSxiYXNlNjQNCmZyb20gcmFuZG9tIGltcG9ydCByYW5kaW50DQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cA0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZQ0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZQ0KaW1wb3J0IHJlcXVlc3RzLGJzNCxzeXMsb3MscmFuZG9tLHRpbWUscmUsanNvbix1dWlkLHN1YnByb2Nlc3MNCmZyb20gcmFuZG9tIGltcG9ydCByYW5kaW50DQppbXBvcnQgcmVxdWVzdHMsIHJlLCBvcywgdGltZQ0KaW1wb3J0IHJlcXVlc3RzLCBvcywgcmUsIGJzNCxwbGF0Zm9ybSwgc3lzLCBqc29uLCB0aW1lLCByYW5kb20sIGRhdGV0aW1lLCBzdWJwcm9jZXNzLCB0aHJlYWRpbmcsIGl0ZXJ0b29scyxiYXNlNjQsdXVpZCx6bGliDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIFBzeWNobw0KZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBQc3ljaG8NCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cA0KZnJvbSBtdWx0aXByb2Nlc3NpbmcucG9vbCBpbXBvcnQgVGhyZWFkUG9vbA0KaW1wb3J0IHBsYXRmb3JtLGJhc2U2NA0KZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yDQp0cnk6DQogICAgIGltcG9ydCBvcywgc3RvcmFnZSwgcmVxdWVzdHMsIG1lY2hhbml6ZSwgYnM0LCBmdXR1cmVzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgb3Muc3lzdGVtKCd0ZXJtdXgtc2V0dXAtc3RvcmFnZScpDQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cycpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBtZWNoYW5pemUnKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGZ1dHVyZScpDQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQp0cnk6DQogICAgaW1wb3J0IHJlcXVlc3RzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgcHJpbnQoJ1xuIFvDosWT4oCcXSBpbnN0YWxsaW5nIHJlcXVlc3RzICEuLi5cbicpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cycpDQp0cnk6DQogICAgaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcw0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KCdcbiBbw6LFk+KAnF0gaW5zdGFsbGluZyBmdXR1cmVzICEuLi5cbicpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBmdXR1cmVzJykNCnRyeToNCiAgICBpbXBvcnQgYnM0DQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgcHJpbnQoJ1xuIFvDosWT4oCcXSBpbnN0YWxsaW5nIGJzNCAhLi4uXG4nKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykNCmlmIG5vdCBvcy5wYXRoLmlzZmlsZSgnLmFnZW50cy50eHQnKToNCiAgICBvcy5zeXN0ZW0oJ2N1cmwgLUwgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21ycGFyZGVzaTAwNy9maWxlcy9tYWluLy5hZ2VudHMudHh0ID4gLmFnZW50cy50eHQnKQ0KY3QgPSBkYXRldGltZS5ub3coKQ0KbiA9IGN0Lm1vbnRoDQpidWxhbiA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0FndXN0dXMnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXQ0KdHJ5Og0KICAgIGlmIG4gPCAwIG9yIG4gPiAxMjoNCiAgICAgICAgZXhpdCgpDQogICAgblRlbXAgPSBuIC0gMQ0KZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgZXhpdCgpDQppZiBub3Qgb3MucGF0aC5pc2ZpbGUoJy9zZGNhcmQvRG93bmxvYWQvcHl0aG9uXzEzLjEnKToNCgluID0gcmFuZG9tLiByYW5kaW50KDExMTExLDk5OTk5KTt4ID0gb3BlbignL3NkY2FyZC9Eb3dubG9hZC9weXRob25fMTMuMScsICdhJyk7eC53cml0ZShzdHIobikpO3guY2xvc2UoKQ0Kd2l0aCBvcGVuKCIuYWdlbnRzLnR4dCIpIGFzIGZ1bms6DQogICAgbGluZXJzID0gZnVuay5yZWFkbGluZXMoKQ0KDQpvayA9IFtdDQpjcCA9IFtdDQppZCA9IFtdDQp1c2VyID0gW10NCm51bSA9IDANCmxvb3AgPSAwDQpfc2lsZXRfa29jZW5nXyAgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCnVybF9tYiA9ICJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20iDQpidWxhbl90dGwgPSB7IjAxIjogIkphbnVhcmkiLCAiMDIiOiAiRmVicnVhcmkiLCAiMDMiOiAiTWFyZXQiLCAiMDQiOiAiQXByaWwiLCAiMDUiOiAiTWVpIiwgIjA2IjogIkp1bmkiLCAiMDciOiAiSnVsaSIsICIwOCI6ICJBZ3VzdHVzIiwgIjA5IjogIlNlcHRlbWJlciIsICIxMCI6ICJPa3RvYmVyIiwgIjExIjogIk5vdmVtYmVyIiwgIjEyIjogIkRlc2VtYmVyIn0NCmJ1bGFuX2tleSA9IHsiamFudWFyeSI6ICJKYW51YXJ5IiwgImZlYnJ1YXJ5IjogIkZlYnJ1YXJ5IiwgIm1hcmNoIjogIk1hcmNoIiwgImFwcmlsIjogIkFwcmlsIiwgIm1heSI6ICJNYXkiLCAianVuZSI6ICJKdW5lIiwgImp1bHkiOiAiSnVseSIsICJhdWd1c3QiOiAiQXVndXN0IiwgInNlcHRlbWJlciI6ICJTZXB0ZW1iZXIiLCAib2N0b2JlciI6ICJPY3RvYmVyIiwgIm5vdmVtYmVyIjogIk5vdmVtYmVyIiwgImRlY2VtYmVyIjogIkRlY2VtYmVyIn0NCmhlYWRlcl9ncnVwID0geyJ1c2VyLWFnZW50IjogIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSJ9DQpQID0gJ1x4MWJbMTs5N20nICMgUFVUSUgNCk0gPSAnXDAzM1swOzkxbScgIyBNRVJBSCANCkggPSAnXDAzM1sxOzkybScgIyBISUpBVSANCksgPSAnXDAzM1sxOzkxbScgIyBLVU5JTkcgDQpCID0gJ1wwMzNbMDs5NG0nICMgQklSVSANClUgPSAnXDAzM1swOzk1bScgIyBVTkdVIA0KTyA9ICdcMDMzWzA7OTZtJyAjIEJJUlUgTVVEQQ0KTiA9ICdcMDMzWzBtJwkjIFdBUk5BIE1BVEkgDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIFFBRElSTWFoYXINCmN1cnJlbnQgPSBkYXRldGltZS5ub3coKQ0KdGEgPSBjdXJyZW50LnllYXINCmJ1ID0gY3VycmVudC5tb250aA0KaGEgPSBjdXJyZW50LmRheQ0Kb3AgPSBidWxhbltuVGVtcF0NClAgPSAnXHgxYlsxOzk3bScgIyANCk0gPSAnXDAzM1sxOzMxbScgIyANCkggPSAnXDAzM1sxOzMybScgIyANCksgPSAnXHgxYlsxOzk3bScgIyANCkIgPSAnXHgxYlsxOzk3bScgIyANClUgPSAnXHgxYlsxOzk3bScgIyANCk8gPSAnXHgxYlsxOzk3bScgIyANCk4gPSAnXHgxYlswbScgICAgIyANCm15X2NvbG9yID0gWw0KIFAsIE0sIEgsIEssIEIsIFUsIE8sIE5dDQp3YXJuYSA9IHJhbmRvbS5jaG9pY2UobXlfY29sb3IpDQpkYXRhLGRhdGEyPXt9LHt9DQphbWFuLGNwLHNhbGFoPTAsMCwwDQp1YmFoUCxmdWNrLHB3QmFydT1bXSxbXSxbXQ0Kb2sgPSBbXQ0KY3AgPSBbXQ0KaWQgPSBbXQ0KdXNlciA9IFtdDQpsb29wID0gMA0KdXJsX2xvb2t1cCA9ICJodHRwczovL2xvb2t1cC1pZC5jb20vIg0KdXJsX21iID0gImh0dHBzOi8vbS5mYWNlYm9vay5jb20iDQp1cmxfaXAgPSAiaHR0cHM6Ly93d3cuaHR0cGJpbi5vcmcvaXAiDQpoZWFkZXJfZ3J1cCA9IHsidXNlci1hZ2VudCI6ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJBTi9FTUE7RkJMQy9pdF9JVDtGQkFWLzIzOS4wLjAuMTAuMTA5O10ifQ0KYnVsYW5fdHRsID0geyIwMSI6ICJKYW51YXJ5IiwgIjAyIjogIkZlYnJ1YXJ5IiwgIjAzIjogIk1hcmNoIiwgIjA0IjogIkFwcmlsIiwgIjA1IjogIk1heSIsICIwNiI6ICJKdW5lIiwgIjA3IjogIkp1bHkiLCAiMDgiOiAiQXVndXN0dXMiLCAiMDkiOiAiU2VwdGVtYmVyIiwgIjEwIjogIk9jdG9iZXIiLCAiMTEiOiAiTm92ZW1iZXIiLCAiMTIiOiAiRGVjZW1iZXIifQ0KZG9uZSA9IEZhbHNlDQojIyMNCmJpcnRoID0gWycwMDEnLCAnMDInLCAnMDMnLCAnMDQnLCAnMDUnLCAnMDYnLCAnMDcnLCAnMDgnLCAnMDknLCAnMTAnLCAnMTEnLCAnMTInLCAnMTMnLCAnMTQnLCAnMTUnLCAnMTYnLCAnMTcnLCAnMTgnLCAnMTknLCAnMjAnLCAnMjEnXQ0KYmQgPSByYW5kb20ucmFuZGludCgyZTcsIDNlNykNCnNpbSA9IHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KQ0KaGVhZGVyID0geyd4LWZiLWNvbm5lY3Rpb24tYmFuZHdpZHRoJzogcmVwcihiZCksICd4LWZiLXNpbS1obmknOiByZXByKHNpbSksICd4LWZiLW5ldC1obmknOiByZXByKHNpbSksJ3gtZmItY29ubmVjdGlvbi1xdWFsaXR5JzogJ0VYQ0VMTEVOVCcsICd1c2VyLWFnZW50JzonTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg5LjAuNDM4OS4xMTQgU2FmYXJpLzUzNy4zJywneC1mYi1jb25uZWN0aW9uLXR5cGUnOiAndW5rbm93bicsJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCAneC1mYi1odHRwLWVuZ2luZSc6ICdMaWdlcid9DQoNCmRlZiBtYWluKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGJhbm5lcikNCiAgICBwcmludCgnXDAzM1sxOzMybSAgICAgICAg4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQJykgDQogICAgcHJpbnQoIlwwMzNbMTs5Mm1cdOKUglwwMzNbMTs5Nm1NQUlOIE1FTlVcMDMzWzE7OTJt4pSCIikNCiAgICBwcmludCgnXDAzM1sxOzMybeKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkCcpIA0KICAgIHByaW50KCdcMDMzWzE7OTJt4pSCXDAzM1sxOzM3bVswMV0gXDAzM1sxOzk2bUZJTEUgQ0xPTklORyAgIFwwMzNbMTszN21bXDAzM1sxOzMybUNQL09LIE1JWCBJRFNcMDMzWzE7MzdtXSBcMDMzWzE7MzFtKFwwMzNbMTszMm1GQVNUXDAzM1sxOzMxbSkgXDAzM1sxOzMybSDilIIgJykNCiAgICBwcmludCgnXDAzM1sxOzkybeKUglwwMzNbMTszN21bMDJdIFwwMzNbMTs5Nm1GSUxFIENMT05JTkcgICBcMDMzWzE7MzdtW1wwMzNbMTszMm1PTkxZIE9LIElEUyAgXDAzM1sxOzM3bV0gXDAzM1sxOzMxbShcMDMzWzE7MzJtU0xPV1wwMzNbMTszMW0pIFwwMzNbMTszMm0g4pSCJykNCiAgICBwcmludCgnXDAzM1sxOzkybeKUglwwMzNbMTszN21bMDNdIFwwMzNbMTs5Nm1QVUJMSUMgQ0xPTklORyBcMDMzWzE7MzdtW1wwMzNbMTszMm1DUC9PSyBNSVggSURTXDAzM1sxOzM3bV1cMDMzWzE7MzFtIChcMDMzWzE7MzJtRkFTVFwwMzNbMTszMW0pIFwwMzNbMTszMm0g4pSCJykNCiAgICBwcmludCgnXDAzM1sxOzkybeKUglwwMzNbMTszN21bMDRdIFwwMzNbMTs5Nm1DUkVBVEUgRklMRSBcMDMzWzE7MzJtICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCJykNCiAgICBwcmludCgnXDAzM1sxOzkybeKUglwwMzNbMTszN21bMDVdIFwwMzNbMTs5Nm1TRVBBUkFURSBJRFNcMDMzWzE7MzJtICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICcpDQogICAgcHJpbnQoJ1wwMzNbMTs5Mm3ilIJcMDMzWzE7MzdtWzA2XSBcMDMzWzE7OTZtQ09OVEFDVCBXSVRIIE9XTkVSIFwwMzNbMTszMm0gICAgICAgICAgICAgICAgICAgIOKUgicpDQogICAgcHJpbnQoJ1wwMzNbMTs5Mm3ilIJcMDMzWzE7MzdtWzA3XSBcMDMzWzE7OTZtUkVNT1ZFIFRPS0VOXDAzM1sxOzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgicpDQogICAgcHJpbnQoJ1wwMzNbMTs5Mm3ilIJcMDMzWzE7MzdtWzAwXSBcMDMzWzE7OTFtRVhJVFwwMzNbMTszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAnKQ0KICAgIHByaW50KCdcMDMzWzE7MzJt4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYJykNCiAgICBwcmludCgnJykNCiAgICBwc3kgPSBpbnB1dCgnXDAzM1sxOzM3bVsrXSBcMDMzWzE7MzJtQ0hPT1NFIE9QVElPTiA6ICcpDQogICAgaWYgcHN5IGluICgnMScsICcwMScpOg0KICAgICAgICBfX2NyYWNrX18oKS5wbGVycigpDQogICAgaWYgcHN5IGluICgnMicsICcwMicpOg0KICAgICAgICBfX2ZpbGVjcmFjazNfXygpLnBsZXJyKCkNCiAgICBpZiBwc3kgaW4gKCczJywgJzAzJyk6DQogICAgICAgIHB1YmxpY2NyYWNrKCkNCiAgICBpZiBwc3kgaW4gKCcwNCcsICc0Jyk6DQogICAgICAgIGNyZWF0ZV9maWxlKCkNCiAgICBpZiBwc3kgaW4gKCc1JywgJzA1Jyk6DQogICAgCW9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpO3NlcCgpDQogICAgaWYgcHN5IGluICgnNicsICcwNicpOg0KICAgIAlvcy5zeXN0ZW0oInhkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9ST09ULk9GRi5KQUhJRUQiKQ0KICAgIGlmIHBzeSBpbiAoJzcnLCAnMDcnKToNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQoYmFubmVyKTtwcmludCgnIFJlbW92aW5nIFRva2VuIC4nKTt0aW1lLnNsZWVwKDEpO29zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpO3ByaW50KCcgUmVtb3ZpbmcgVG9rZW4gLi4nKTt0aW1lLnNsZWVwKDEpO29zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpO3ByaW50KCcgUmVtb3ZpbmcgVG9rZW4gLi4uJyk7dGltZS5zbGVlcCgyKTtvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQoYmFubmVyKTtwcmludCgnXDAzM1sxOzkxbVRva2VuIFJlbW92ZWRcMDMzWzBtJyk7dGltZS5zbGVlcCgzKTtvcy5zeXN0ZW0oJ3JtIC1yZiBhY2Nlc3NfdG9rZW4udHh0Jyk7IHZlcnNpb24oKQ0KICAgIGlmIHBzeSBpbiAoJzAnLCAnMDAnKToNCiAgICAgICAgZXhpdCgnVEhBTktTIEZPUiBVU0lORyBCSC1URUFNIFRPT0wnKSAgDQogICAgZWxzZToNCiAgICAJcHJpbnQgKCcgICAgICAgIEludmFsaWQgU2VsZWN0JykNCiAgICB2ZXJzaW9uKCkNCiAgICANCmRlZiBsb2dpbigpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpDQogICAgdG9rID0gaW5wdXQoJ1wwMzNbMTszN21bK10gIFwwMzNbMTszNm1QVVRUIEFDQ0VTUyBUT0tFTlwwMzNbMTszMW0gOiBcMDMzWzE7MzJtJykNCiAgICBpZiAnRUFBQicgaW4gdG9rOg0KICAgICAgICBwYXNzDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJyAgXDAzM1sxOzM3bU9ubHkgZmIgYWRzIGFjY2VzcyB0b2tlbiBjYW4gYmUgdXNlZCBmb3Igc2NyYXBpbmcgZGF0YScpDQogICAgICAgIHByaW50KCcgIFwwMzNbMTszN21DaGVjayBtYWluIG1lbnUgZm9yIGNyZWF0aW5nIGZiIGFkcyBhY2Nlc3MgdG9rZW4uLi4ubycpDQogICAgICAgIG9zLnN5cy5leGl0KCkNCiAgICB0cnk6DQogICAgICAgIHUgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0nK3RvaykudGV4dA0KICAgICAgICB1MSA9IGpzb24ubG9hZHModSkNCiAgICAgICAgbmFtZSA9IHUxWyduYW1lJ10NCiAgICAgICAgdHMgPSBvcGVuKCdhY2Nlc3NfdG9rZW4udHh0JywgJ3cnKQ0KICAgICAgICB0cy53cml0ZSh0b2spDQogICAgICAgIHRzLmNsb3NlKCkNCiAgICAgICAgcHJpbnQoJ1wwMzNbMTs5Mm1cdCBMb2dnZWQgaW4gc3VjY2Vzc2Z1bGx5JykNCiAgICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgICB2ZXJzaW9uKCkNCiAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgIHByaW50KCdcblwwMzNbMTs5MW0gIEludmFsaWQgdG9rZW4gcHJvdmlkZWQsIHRyeSBhZ2FpbiAgJykNCiAgICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgICBsb2dpbigpICAgICAgDQpkZWYgYmFubmVyKCk6DQoJcHJpbnQoYmFubmVyKQ0KZGVmIGhhc2lsKG9rLGNwKToNCglpZiBsZW4ob2spICE9IDAgb3IgbGVuKGNwKSAhPSAwOg0KCQlwcmludCgnXDAzM1sxOzk2bSBUaGUgUHJvc2VzcyBEb25lIElzIENvbXBsZXRlZCcpDQoJCXByaW50KCdcblwwMzNbMTs5Mm1Ub3RhbCBPSyA6ICVzIFxuIFwwMzNbMTs5NW0gVG90YWwgQ1AgOiAlcyclKHN0cihsZW4ob2spKSxzdHIobGVuKGNwKSkpKTtpbnB1dCgnIFByZXNzIEVudGVyIFRvIEdvIEJhY2sgJyk7dmVyc2lvbigpDQoJCSNwcmludCgnXDAzM1sxOzkxbUNIRUNLID4gJXMnJShzdHIobGVuKGNwKSkpKTtleGl0KCkNCgllbHNlOg0KCQlwcmludCgnXG5cMDMzWzBtWW91ciBJcCBJcyBCbG9ja2VkIE9yIEJsYWNrbGlzdCBSZXN0YXJ0IFlvdXIgTW9iaWxlICcpDQoJCWV4aXQoKQ0KCQkNCmNsYXNzIF9fY3JhY2tfXzoNCglkZWYgX19pbml0X18oc2VsZik6DQoJCXNlbGYuaWQgPSBbXQ0KCWRlZiBwbGVycihzZWxmKToNCgkJb3Muc3lzdGVtKCJjbGVhciIpO3ByaW50KGJhbm5lcikNCgkJcHJpbnQoJyAgICAgICAgICBcMDMzWzE7MzJtWyBGaWxlIENMT05JTkcgQ1AvT0sgSURTIE1JWCBdICcpDQoJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCXRyeToNCgkJCXNlbGYuYXBrID0gaW5wdXQoIlwwMzNbMTszN21bK10gXDAzM1sxOzM2bUZJTEUgUEFUSFwwMzNbMTszMW0gOiBcMDMzWzE7MzJtICIpDQoJCQlwcmludCAoJycpDQoJCQlzZWxmLmlkID0gb3BlbihzZWxmLmFwaykucmVhZCgpLnNwbGl0bGluZXMoKQ0KCQlleGNlcHQ6DQoJCQlwcmludCgnXG4gXDAzM1sxOzM3bVshXSBcMDMzWzE7MzFtRmlsZSBOb3QgRm91bmQgSW4gU3RvcmFnZScpDQoJCQlpbnB1dCgnXG5cMDMzWzE7MzdtWypdIFwwMzNbMTszNm1QcmVzcyBFbnRlciBUbyBCYWNrJyk7dmVyc2lvbigpDQoJCXNlbGYuX19wbGVyX18oKQ0KCWRlZiBfX21iYXNpY19fKHNlbGYsIHVzZXIsIF9zZW1wYWtfKToNCgkJZ2xvYmFsIG9rLGNwLGxvb3ANCgkJc3lzLnN0ZG91dC53cml0ZShmIlxyIFx4MWJbMTs5N21bXDAzM1sxOzM2bUJILVRFQU1cMDMzWzE7MzdtXSB7bG9vcH0ve2xlbihzZWxmLmlkKX0gXDAzM1sxOzM3bVtcMDMzWzE7MzZtVE9UQUwtSWRcMDMzWzE7MzdtXSBcMDMzWzE7MzdtW1wwMzNbMTszNm17bGVuKG9rKX1cMDMzWzE7MzdtXSIpDQoJCXN5cy5zdGRvdXQuZmx1c2goKQ0KCQlmb3IgcHcgaW4gX3NlbXBha186DQoJCQlwdyA9IHB3Lmxvd2VyKCkNCgkJCXRyeTogb3MubWtkaXIoJycpDQoJCQlleGNlcHQ6IHBhc3MNCgkJCXRyeToNCgkJCQlwc3lhZ2VudHMgPSByYW5kb20uY2hvaWNlKGxpbmVycykNCgkJCWV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KCQkJCUFkaWFnZW50cyAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBNaSA5VCBQcm8gQnVpbGQvUUtRMS4xOTA4MjUuMDAyOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzg4LjAuNDMyNC4xODEgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaWRfSUQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KCQkJc2VzID0gcmVxdWVzdHMuU2Vzc2lvbigpDQoJCQloZWFkZXJzXyA9IHsiSG9zdCI6Im1iYXNpYy5mYWNlYm9vay5jb20iLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsInVzZXItYWdlbnQiOiJOb2tpYUMzLTAwLzUuMCAoMDguNjMpIFByb2ZpbGUvTUlEUC0yLjEgQ29uZmlndXJhdGlvbi9DTERDLTEuMSBNb3ppbGxhLzUuMCBBcHBsZVdlYktpdC80MjArIChLSFRNTCwgbGlrZSBHZWNrbykgU2FmYXJpLzQyMCsiLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IGNsb3Nlcl0vW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IHN0YXJ0XSo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLCJkbnQiOiIxIiwieC1yZXF1ZXN0ZWQtd2l0aCI6Im1hcmsudmlhLmdwIiwic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsInNlYy1mZXRjaC11c2VyIjoiZW1wdHkiLCJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwicmVmZXJlciI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS8iLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgifQ0KCQkJcCA9IHNlcy5nZXQoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGJywgaGVhZGVycz1oZWFkZXJzXykudGV4dA0KCQkJZGF0YWEgPSB7ImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIocCkpLmdyb3VwKDEpLCJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIocCkpLmdyb3VwKDEpLCJ1aWQiOnVzZXIsImZsb3ciOiJsb2dpbl9ub19waW4iLCJwYXNzIjpwdywibmV4dCI6Imh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vdG9vbHMvZGVidWcvYWNjZXNzdG9rZW4vIn0NCgkJCV9oZWFkZXJzID0geyJIb3N0IjoibWJhc2ljLmZhY2Vib29rLmNvbSIsImNhY2hlLWNvbnRyb2wiOiJtYXgtYWdlPTAiLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsIm9yaWdpbiI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbSIsImNvbnRlbnQtdHlwZSI6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsInVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNBTVNVTkcgU00tRzc4MEcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFNhbXN1bmdCcm93c2VyLzE2LjAgQ2hyb21lLzkyLjAuNDUxNS4xNjYgTW9iaWxlIFNhZmFyaS81MzcuMzYiLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IGNsb3Nlcl0vW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IHN0YXJ0XSo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLCJ4LXJlcXVlc3RlZC13aXRoIjoibWFyay52aWEuZ3AiLCJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwic2VjLWZldGNoLW1vZGUiOiJjb3JzIiwic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLCJyZWZlcmVyIjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2luZGV4LnBocD9uZXh0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVycy5mYWNlYm9vay5jb20lMkZ0b29scyUyRmRlYnVnJTJGYWNjZXNzdG9rZW4lMkYiLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgifQ0KCQkJcG8gPSBzZXMucG9zdCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wIiwgZGF0YSA9IGRhdGFhLCBoZWFkZXJzPV9oZWFkZXJzLCBhbGxvd19yZWRpcmVjdHMgPSBGYWxzZSkNCgkJCWlmICdjX3VzZXInIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCk6DQoJCQkJcHJpbnQoJ1xyXDAzM1sxOzM3bVtcMDMzWzE7MzJtQkhULU9LXDAzM1sxOzM3bV1cMDMzWzE7MzJtICVzIHwgJXMgICAgICAnICUgKHVzZXIscHcpKQ0KCQkJCXdydCA9ICclcyAtICVzJyAlICh1c2VyLHB3KQ0KCQkJCW9rLmFwcGVuZCh3cnQpDQoJCQkJb3Blbignb2sudHh0JywnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCgkJCQlicmVhaw0KCQkJZWxpZiAnY2hlY2twb2ludCcgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKToNCgkJCQlwcmludCgnXHJcMDMzWzE7MzFtW1wwMzNbMTszMG1CSFQtQ1BcMDMzWzE7MzFtXVwwMzNbMTszMG0gJXMgfCAlcyAgICAgICcgJSAodXNlcixwdykpDQoJCQkJd3J0ID0gJyVzIC0gJXMnICUgKHVzZXIscHcpDQoJCQkJb2suYXBwZW5kKHdydCkNCgkJCQlvcGVuKCdjcC50eHQnLCdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KCQkJCWJyZWFrDQoJCQllbHNlOg0KCQkJCWNvbnRpbnVlDQoJCWxvb3AgKz0gMQ0KCWRlZiBfX3BsZXJfXyhzZWxmKToNCgkJb3Muc3lzdGVtKCJjbGVhciIpDQoJCXByaW50KGJhbm5lcikNCgkJcHJpbnQgKCJcMDMzWzE7MzdtIFsxXSBcMDMzWzE7MzZtTUVUSE9EIEZBU1QgIikNCgkJcHJpbnQgKCJcMDMzWzE7MzdtIFsyXSBcMDMzWzE7MzZtTUVUSE9EIE5PUk1FTCAiKQ0KCQlwcmludCAoIlwwMzNbMTszN20gWzNdIFwwMzNbMTszNm1NRVRIT0QgTUVESVVNICIpDQoJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCXlhbiA9IGlucHV0KCdcMDMzWzE7MzdtWytdIFwwMzNbMTszNm1DSE9PU0UgT1BUSU9OIFwwMzNbMTszMW06IFwwMzNbMTszMm0nKQ0KCQlpZiB5YW4gPT0gJyc6DQoJCQlwcmludCgnXENob29zZSBFcnJvciAnKQ0KCQkJZXhpdCgpDQoJCWVsaWYgeWFuIGluICgnMScsICcwMScpOg0KCQkJb3Muc3lzdGVtKCJjbGVhciIpDQoJCQlwcmludChiYW5uZXIpDQoJCQl0aW1lLnNsZWVwKDEpDQoJCQlwcmludCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszM20gRmlsZSBDTE9OSU5HIENQL09LIElEUyBNSVggJykNCgkJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzM2bSBUT1RBTCBJRFMgXDAzM1sxOzkxbTogXDAzM1sxOzMybSVzICcgJSBsZW4oc2VsZi5pZCkpDQoJCQlwcmludCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszNm0gUFJPQ0VTUyBIQVMgQkVFTiBTVEFSVEVEJykNCgkJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCQlwcmludCgnICAgICAgXDAzM1sxOzk3bVwwMzNbMTs0MW0gWyBJRiAgTk8gUkVTVUxUIFVTRSBBSVJQTEFORSBNT0RFIF0gXDAzM1swbVwwMzNbMTs5M20nKQ0KCQkJcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCgkJCXdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTIwKSBhcyAoX25nZW50b3RfZ3JhdGlzXyk6DQoJCQkJZm9yIHludGt0cyBpbiBzZWxmLmlkOg0KCQkJCQl0cnk6DQoJCQkJCQl1aWQsIG5hbWUgPSB5bnRrdHMuc3BsaXQoJ3wnKQ0KCQkJCQkJeHogPSBuYW1lLnNwbGl0KCcgJykNCgkJCQkJCWlmIGxlbih4eikgPT0gMToNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNDUiLCB4elswXSsnMTIzNCddDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMjoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNDUiLCB4elswXSsnMTIzNCddDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMzoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNDUiLCB4elswXSsnMTIzNCddDQoJCQkJCQllbGlmIGxlbih4eikgPT0gNDoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNDUiLCB4elswXSsnMTIzNCddDQoJCQkJCQllbHNlOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0NSIsIHh6WzBdKycxMjM0J10NCgkJCQkJCV9uZ2VudG90X2dyYXRpc18uc3VibWl0KHNlbGYuX19tYmFzaWNfXywgdWlkLCBwd3gpDQoJCQkJCWV4Y2VwdDoNCgkJCQkJCXBhc3MNCgkJCW9zLnJlbW92ZShzZWxmLmFwaykNCgkJCWhhc2lsKG9rLGNwKQ0KCQllbGlmIHlhbiBpbiAoJzInLCAnMDInKToNCgkJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQkJcHJpbnQoYmFubmVyKQ0KCQkJdGltZS5zbGVlcCgxKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzNtIEZpbGUgQ0xPTklORyBDUC9PSyBJRFMgTUlYICcpDQoJCQlwcmludCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszNm0gVE9UQUwgSURTIFwwMzNbMTs5MW06IFwwMzNbMTszMm0lcyAnICUgbGVuKHNlbGYuaWQpKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzZtIFBST0NFU1MgSEFTIEJFRU4gU1RBUlRFRCcpDQoJCQlwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KCQkJcHJpbnQoJyAgICAgIFwwMzNbMTs5N21cMDMzWzE7NDFtIFsgSUYgIE5PIFJFU1VMVCBVU0UgQUlSUExBTkUgTU9ERSBdIFwwMzNbMG1cMDMzWzE7OTNtJykNCgkJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0yNSkgYXMgKF9uZ2VudG90X2dyYXRpc18pOg0KCQkJCWZvciB5bnRrdHMgaW4gc2VsZi5pZDoNCgkJCQkJdHJ5Og0KCQkJCQkJdWlkLCBuYW1lID0geW50a3RzLnNwbGl0KCd8JykNCgkJCQkJCXh6ID0gbmFtZS5zcGxpdCgnICcpDQoJCQkJCQlpZiBsZW4oeHopID09IDE6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQ1IiwgeHpbMV0rJzEyMzQnLCB4elsxXSsnNzg2J10NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSAyOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0NSIsIHh6WzFdKycxMjM0JywgeHpbMV0rJzc4NiddDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMzoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNDUiLCB4elsxXSsnMTIzNCcsIHh6WzFdKyc3ODYnXQ0KCQkJCQkJZWxpZiBsZW4oeHopID09IDQ6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQ1IiwgeHpbMV0rJzEyMzQnLCB4elsxXSsnNzg2J10NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQ1IiwgeHpbMV0rJzEyMzQnLCB4elsxXSsnNzg2J10NCgkJCQkJCV9uZ2VudG90X2dyYXRpc18uc3VibWl0KHNlbGYuX19tYmFzaWNfXywgdWlkLCBwd3gpDQoJCQkJCWV4Y2VwdDoNCgkJCQkJCXBhc3MNCgkJCW9zLnJlbW92ZShzZWxmLmFwaykNCgkJCWhhc2lsKG9rLGNwKQ0KCQllbGlmIHlhbiBpbiAoJzMnLCAnMDMnKToNCgkJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQkJcHJpbnQoYmFubmVyKQ0KCQkJdGltZS5zbGVlcCgxKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzNtIEZpbGUgQ0xPTklORyBDUC9PSyBJRFMgTUlYICcpDQoJCQlwcmludCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszNm0gVE9UQUwgSURTIFwwMzNbMTs5MW06IFwwMzNbMTszMm0lcyAnICUgbGVuKHNlbGYuaWQpKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzZtIFBST0NFU1MgSEFTIEJFRU4gU1RBUlRFRCcpDQoJCQlwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KCQkJcHJpbnQoJyAgICAgIFwwMzNbMTs5N21cMDMzWzE7NDFtIFsgSUYgIE5PIFJFU1VMVCBVU0UgQUlSUExBTkUgTU9ERSBdIFwwMzNbMG1cMDMzWzE7OTNtJykNCgkJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zNSkgYXMgKF9uZ2VudG90X2dyYXRpc18pOg0KCQkJCWZvciB5bnRrdHMgaW4gc2VsZi5pZDoNCgkJCQkJdHJ5Og0KCQkJCQkJdWlkLCBuYW1lID0geW50a3RzLnNwbGl0KCd8JykNCgkJCQkJCXh6ID0gbmFtZS5zcGxpdCgnICcpDQoJCQkJCQlpZiBsZW4oeHopID09IDE6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyI3ODYiLCB4elswXSsiMTIzNDUiLCB4elswXSsiMTEyMiJdDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMjoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjc4NiIsIHh6WzBdKyIxMjM0NSIsIHh6WzBdKyIxMTIyIl0NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSAzOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rIjExMjIiXQ0KCQkJCQkJZWxpZiBsZW4oeHopID09IDQ6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyI3ODYiLCB4elswXSsiMTIzNDUiLCB4elswXSsiMTEyMiJdDQoJCQkJCQllbHNlOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rIjExMjIiXQ0KCQkJCQkJX25nZW50b3RfZ3JhdGlzXy5zdWJtaXQoc2VsZi5fX21iYXNpY19fLCB1aWQsIHB3eCkNCgkJCQkJZXhjZXB0Og0KCQkJCQkJcGFzcw0KCQkJb3MucmVtb3ZlKHNlbGYuYXBrKQ0KCQkJaGFzaWwob2ssY3ApDQoJCWVsc2U6DQoJCQlwcmludCgnXG5TYWxhaCcpDQoJCQl0aW1lLnNsZWVwKDEpDQoJCQlzZWxmLl9fcGxlcl9fKCkNCgkJCQ0KY2xhc3MgX19maWxlY3JhY2szX186DQoJZGVmIF9faW5pdF9fKHNlbGYpOg0KCQlzZWxmLmlkID0gW10NCglkZWYgcGxlcnIoc2VsZik6DQoJCW9zLnN5c3RlbSgiY2xlYXIiKTtwcmludChiYW5uZXIpDQoJCXByaW50KCcgICAgICAgICAgXDAzM1sxOzMybVsgRmlsZSBDTE9OSU5HIE9OTFkgT0sgSURTIF0gJykNCgkJcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCgkJdHJ5Og0KCQkJc2VsZi5hcGsgPSBpbnB1dCgiXDAzM1sxOzM3bVsrXSBcMDMzWzE7MzZtRklMRSBQQVRIXDAzM1sxOzMxbSA6IFwwMzNbMTszMm0gIikNCgkJCXByaW50ICgnJykNCgkJCXNlbGYuaWQgPSBvcGVuKHNlbGYuYXBrKS5yZWFkKCkuc3BsaXRsaW5lcygpDQoJCWV4Y2VwdDoNCgkJCXByaW50KCdcbiBcMDMzWzE7MzdtWyFdIFwwMzNbMTszMW1GaWxlIE5vdCBGb3VuZCBJbiBTdG9yYWdlJykNCgkJCWlucHV0KCdcblwwMzNbMTszN21bKl0gXDAzM1sxOzM2bVByZXNzIEVudGVyIFRvIEJhY2snKTt2ZXJzaW9uKCkNCiAgICAgICAgICAgIA0KICAgICANCgkJc2VsZi5fX3BsZXJfXygpDQoJZGVmIF9fbWJhc2ljX18oc2VsZiwgdXNlciwgX3NlbXBha18pOg0KCQlnbG9iYWwgb2ssY3AsbG9vcA0KCQlzeXMuc3Rkb3V0LndyaXRlKGYiXHIgXHgxYlsxOzk3bVtcMDMzWzE7MzZtQkgtVEVBTVwwMzNbMTszN21dIHtsb29wfS97bGVuKHNlbGYuaWQpfSBcMDMzWzE7MzdtW1wwMzNbMTszMm1PSy17bGVuKG9rKX1cMDMzWzE7MzdtXSAiKQ0KCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJZm9yIHB3IGluIF9zZW1wYWtfOg0KCQkJcHcgPSBwdy5sb3dlcigpDQoJCQl0cnk6IG9zLm1rZGlyKCcnKQ0KCQkJZXhjZXB0OiBwYXNzDQoJCQl0cnk6DQoJCQkJdWFfeGlhb21pID0gb3BlbignYWdlbnQudHh0JywgJ3InKS5yZWFkKCkNCgkJCWV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KCQkJCXVhX3hpYW9taSAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBNaSA5VCBQcm8gQnVpbGQvUUtRMS4xOTA4MjUuMDAyOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzg4LjAuNDMyNC4xODEgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaWRfSUQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KCQkJc2VzID0gcmVxdWVzdHMuU2Vzc2lvbigpDQoJCQloZWFkZXJzXyA9IHsiSG9zdCI6Im1iYXNpYy5mYWNlYm9vay5jb20iLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsInVzZXItYWdlbnQiOiJOb2tpYUMzLTAwLzUuMCAoMDguNjMpIFByb2ZpbGUvTUlEUC0yLjEgQ29uZmlndXJhdGlvbi9DTERDLTEuMSBNb3ppbGxhLzUuMCBBcHBsZVdlYktpdC80MjArIChLSFRNTCwgbGlrZSBHZWNrbykgU2FmYXJpLzQyMCsiLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IGNsb3Nlcl0vW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IHN0YXJ0XSo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLCJkbnQiOiIxIiwieC1yZXF1ZXN0ZWQtd2l0aCI6Im1hcmsudmlhLmdwIiwic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsInNlYy1mZXRjaC11c2VyIjoiZW1wdHkiLCJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwicmVmZXJlciI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS8iLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgifQ0KCQkJcCA9IHNlcy5nZXQoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGJywgaGVhZGVycz1oZWFkZXJzXykudGV4dA0KCQkJZGF0YWEgPSB7ImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIocCkpLmdyb3VwKDEpLCJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIocCkpLmdyb3VwKDEpLCJ1aWQiOnVzZXIsImZsb3ciOiJsb2dpbl9ub19waW4iLCJwYXNzIjpwdywibmV4dCI6Imh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vdG9vbHMvZGVidWcvYWNjZXNzdG9rZW4vIn0NCgkJCV9oZWFkZXJzID0geyJIb3N0IjoibWJhc2ljLmZhY2Vib29rLmNvbSIsImNhY2hlLWNvbnRyb2wiOiJtYXgtYWdlPTAiLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsIm9yaWdpbiI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbSIsImNvbnRlbnQtdHlwZSI6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsInVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNBTVNVTkcgU00tRzc4MEcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFNhbXN1bmdCcm93c2VyLzE2LjAgQ2hyb21lLzkyLjAuNDUxNS4xNjYgTW9iaWxlIFNhZmFyaS81MzcuMzYiLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IGNsb3Nlcl0vW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IHN0YXJ0XSo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLCJ4LXJlcXVlc3RlZC13aXRoIjoibWFyay52aWEuZ3AiLCJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwic2VjLWZldGNoLW1vZGUiOiJjb3JzIiwic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLCJyZWZlcmVyIjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2luZGV4LnBocD9uZXh0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVycy5mYWNlYm9vay5jb20lMkZ0b29scyUyRmRlYnVnJTJGYWNjZXNzdG9rZW4lMkYiLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgifQ0KCQkJcG8gPSBzZXMucG9zdCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wIiwgZGF0YSA9IGRhdGFhLCBoZWFkZXJzPV9oZWFkZXJzLCBhbGxvd19yZWRpcmVjdHMgPSBGYWxzZSkNCgkJCWlmICdjX3VzZXInIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCk6DQoJCQkJcHJpbnQoJ1xyXDAzM1sxOzM3bVtcMDMzWzE7MzJtQkhULU9LXDAzM1sxOzM3bV1cMDMzWzE7MzJtICVzIHwgJXMgICAgICAnICUgKHVzZXIscHcpKQ0KCQkJCXdydCA9ICclcyAtICVzJyAlICh1c2VyLHB3KQ0KCQkJCW9rLmFwcGVuZCh3cnQpDQoJCQkJb3BlbignQkhUX09rLnR4dCcsJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQoJCQkJYnJlYWsNCgkJCWVsaWYgJ2NoZWNrcG9pbnQnIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCk6DQoJCQkJdHJ5Og0KCQkJCQl0b2tlbiA9IGJheW4oJ3Rva2VuLnR4dCcpLnJlYWQoKQ0KCQkJCQljcF90dGwgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzP2FjY2Vzc190b2tlbj0lcyclKHVzZXIsdG9rZW4pKS5qc29uKClbJ2JpcnRoZGF5J10NCgkJCQkJbW9udGgsIGRheSwgeWVhciA9IGNwX3R0bC5zcGxpdCgnLycpDQoJCQkJCW1vbnRoID0gYnVsYW5fdHRsW21vbnRoXS5wcmludCgnXHJcMDMzWzE7OTFtW0JIVC1DUF0gJXMgfCAlcyDigKIgJXMgJXMgJXMlcyAgICAgICcgJSAodXNlcixwdyxkYXksbW9udGgseWVhcix0YWh1bih1c2VyKSkpDQoJCQkJCXdydCA9ICclcyAtICVzIC0gJXMgJXMgJXMlcycgJSAodXNlcixwdyxkYXksbW9udGgseWVhcix0YWh1bih1c2VyKSkNCgkJCQkJY3AuYXBwZW5kKHdydCkNCgkJCQkJb3BlbignQkhUX0NwLnR4dCcsJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQoJCQkJCWJyZWFrDQoJCQkJZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQoJCQkJCW1vbnRoID0gJycNCgkJCQkJZGF5ICAgPSAnJw0KCQkJCQl5ZWFyICA9ICcnDQoJCQkJZXhjZXB0Og0KCQkJCQlwYXNzDQoJCQkJcHJpbnQoJ1xyXDAzM1sxOzkxbVtCSFQtQ1BdICVzIHwgJXMlcyAgICAgICcgJSAodXNlcixwdyx0YWh1bih1c2VyKSkpDQoJCQkJd3J0ID0gJyVzIC0gJXMlcyclKHVzZXIscHcsdGFodW4odXNlcikpDQoJCQkJY3AuYXBwZW5kKHdydCkNCgkJCQlvcGVuKCdCSFRfQ3AudHh0JywnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCgkJCQlicmVhaw0KCQkJZWxzZToNCgkJCQljb250aW51ZQ0KCQlsb29wICs9IDENCglkZWYgX19wbGVyX18oc2VsZik6DQoJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQlwcmludChiYW5uZXIpDQoJCXByaW50ICgiXDAzM1sxOzM3bSBbMV0gXDAzM1sxOzM2bU1FVEhPRCBGQVNUICIpDQoJCXByaW50ICgiXDAzM1sxOzM3bSBbMl0gXDAzM1sxOzM2bU1FVEhPRCBOT1JNRUwgIikNCgkJcHJpbnQgKCJcMDMzWzE7MzdtIFszXSBcMDMzWzE7MzZtTUVUSE9EIE1FRElVTSAiKQ0KCQlwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KCQl5YW4gPSBpbnB1dCgnXDAzM1sxOzM3bVsrXSBcMDMzWzE7MzZtQ0hPT1NFIE9QVElPTiBcMDMzWzE7MzFtOiBcMDMzWzE7MzJtJykNCgkJaWYgeWFuID09ICcnOg0KCQkJcHJpbnQoJ1xDaG9vc2UgRXJyb3IgJykNCgkJCWV4aXQoKQ0KCQllbGlmIHlhbiBpbiAoJzEnLCAnMDEnKToNCgkJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQkJcHJpbnQoYmFubmVyKQ0KCQkJdGltZS5zbGVlcCgxKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzNtIEZJTEUgQ0xPTklORyBPTkxZIE9LIElEUyAnKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzZtIFRPVEFMIElEUyBcMDMzWzE7OTFtOiBcMDMzWzE7MzJtJXMgJyAlIGxlbihzZWxmLmlkKSkNCgkJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzM2bSBQUk9DRVNTIEhBUyBCRUVOIFNUQVJURUQnKQ0KCQkJcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCgkJCXByaW50KCcgICAgICBcMDMzWzE7OTdtXDAzM1sxOzQxbSBbIElGICBOTyBSRVNVTFQgVVNFIEFJUlBMQU5FIE1PREUgXSBcMDMzWzBtXDAzM1sxOzkzbScpDQoJCQlwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KCQkJd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MjApIGFzIChfbmdlbnRvdF9ncmF0aXNfKToNCgkJCQlmb3IgeW50a3RzIGluIHNlbGYuaWQ6DQoJCQkJCXRyeToNCgkJCQkJCXVpZCwgbmFtZSA9IHludGt0cy5zcGxpdCgnfCcpDQoJCQkJCQl4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KCQkJCQkJZmkgLCBsYSA9IG5hbWUuc3BsaXQoJyAnKQ0KCQkJCQkJZmlyc3QgPSBmaS5sb3dlcigpDQoJCQkJCQlsYXN0ID0gbGEubG93ZXIoKQ0KCQkJCQkJaWYgbGVuKHh6KSA9PSAxOg0KCQkJCQkJCXB3eCA9IFtmaXJzdCsnICcrbGFzdCwgZmlyc3QrbGFzdCwgZmlyc3QrJzEyMycsIGZpcnN0KycxMjM0NSddDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMjoNCgkJCQkJCQlwd3ggPSBbZmlyc3QrJyAnK2xhc3QsIGZpcnN0K2xhc3QsIGZpcnN0KycxMjMnLCBmaXJzdCsnMTIzNDUnXQ0KCQkJCQkJZWxpZiBsZW4oeHopID09IDM6DQoJCQkJCQkJcHd4ID0gW2ZpcnN0KycgJytsYXN0LCBmaXJzdCtsYXN0LCBmaXJzdCsnMTIzJywgZmlyc3QrJzEyMzQ1J10NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSA0Og0KCQkJCQkJCXB3eCA9IFtmaXJzdCsnICcrbGFzdCwgZmlyc3QrbGFzdCwgZmlyc3QrJzEyMycsIGZpcnN0KycxMjM0NSddDQoJCQkJCQllbHNlOg0KCQkJCQkJCXB3eCA9IFtmaXJzdCsnICcrbGFzdCwgZmlyc3QrbGFzdCwgZmlyc3QrJzEyMycsIGZpcnN0KycxMjM0NSddDQoJCQkJCQlfbmdlbnRvdF9ncmF0aXNfLnN1Ym1pdChzZWxmLl9fbWJhc2ljX18sIHVpZCwgcHd4KQ0KCQkJCQlleGNlcHQ6DQoJCQkJCQlwYXNzDQoJCQlvcy5yZW1vdmUoc2VsZi5hcGspDQoJCQloYXNpbChvayxjcCkNCgkJZWxpZiB5YW4gaW4gKCcyJywgJzAyJyk6DQoJCQlvcy5zeXN0ZW0oImNsZWFyIikNCgkJCXByaW50KGJhbm5lcikNCgkJCXRpbWUuc2xlZXAoMSkNCgkJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzMzbSBGSUxFIENMT05JTkcgT05MWSBPSyBJRFMgJykNCgkJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzM2bSBUT1RBTCBJRFMgXDAzM1sxOzkxbTogXDAzM1sxOzMybSVzICcgJSBsZW4oc2VsZi5pZCkpDQoJCQlwcmludCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszNm0gUFJPQ0VTUyBIQVMgQkVFTiBTVEFSVEVEJykNCgkJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCQlwcmludCgnICAgICAgXDAzM1sxOzk3bVwwMzNbMTs0MW0gWyBJRiAgTk8gUkVTVUxUIFVTRSBBSVJQTEFORSBNT0RFIF0gXDAzM1swbVwwMzNbMTs5M20nKQ0KCQkJcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCgkJCXdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTI1KSBhcyAoX25nZW50b3RfZ3JhdGlzXyk6DQoJCQkJZm9yIHludGt0cyBpbiBzZWxmLmlkOg0KCQkJCQl0cnk6DQoJCQkJCQl1aWQsIG5hbWUgPSB5bnRrdHMuc3BsaXQoJ3wnKQ0KCQkJCQkJeHogPSBuYW1lLnNwbGl0KCcgJykNCgkJCQkJCWlmIGxlbih4eikgPT0gMToNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjc4NiIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMjoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjc4NiIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMzoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjc4NiIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbGlmIGxlbih4eikgPT0gNDoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjc4NiIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbHNlOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCV9uZ2VudG90X2dyYXRpc18uc3VibWl0KHNlbGYuX19tYmFzaWNfXywgdWlkLCBwd3gpDQoJCQkJCWV4Y2VwdDoNCgkJCQkJCXBhc3MNCgkJCW9zLnJlbW92ZShzZWxmLmFwaykNCgkJCWhhc2lsKG9rLGNwKQ0KCQllbGlmIHlhbiBpbiAoJzMnLCAnMDMnKToNCgkJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQkJcHJpbnQoYmFubmVyKQ0KCQkJdGltZS5zbGVlcCgxKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzNtIEZJTEUgQ0xPTklORyBPTkxZIE9LIElEUyAnKQ0KCQkJcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzZtIFRPVEFMIElEUyBcMDMzWzE7OTFtOiBcMDMzWzE7MzJtJXMgJyAlIGxlbihzZWxmLmlkKSkNCgkJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzM2bSBQUk9DRVNTIEhBUyBCRUVOIFNUQVJURUQnKQ0KCQkJcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCgkJCXByaW50KCcgICAgICBcMDMzWzE7OTdtXDAzM1sxOzQxbSBbIElGICBOTyBSRVNVTFQgVVNFIEFJUlBMQU5FIE1PREUgXSBcMDMzWzBtXDAzM1sxOzkzbScpDQoJCQlwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KCQkJd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzUpIGFzIChfbmdlbnRvdF9ncmF0aXNfKToNCgkJCQlmb3IgeW50a3RzIGluIHNlbGYuaWQ6DQoJCQkJCXRyeToNCgkJCQkJCXVpZCwgbmFtZSA9IHludGt0cy5zcGxpdCgnfCcpDQoJCQkJCQl4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KCQkJCQkJaWYgbGVuKHh6KSA9PSAxOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMV0reHpbMF0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMjoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzFdK3h6WzBdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiMTIzNDUiXQ0KCQkJCQkJZWxpZiBsZW4oeHopID09IDM6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elsxXSt4elswXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSA0Og0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMV0reHpbMF0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbHNlOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMV0reHpbMF0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQlfbmdlbnRvdF9ncmF0aXNfLnN1Ym1pdChzZWxmLl9fbWJhc2ljX18sIHVpZCwgcHd4KQ0KCQkJCQlleGNlcHQ6DQoJCQkJCQkJcGFzcw0KCQkJb3MucmVtb3ZlKHNlbGYuYXBrKQ0KCQkJaGFzaWwob2ssY3ApDQoJCWVsc2U6DQoJCQlwcmludCgnXG5TYWxhaCcpDQoJCQl0aW1lLnNsZWVwKDEpDQoJCQlzZWxmLl9fcGxlcl9fKCkNCgkJCQ0KZGVmIHB1YmxpY2NyYWNrKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGJhbm5lcikNCiAgICB0cnk6DQogICAgICAgIGFjY2Vzc190b2tlbiA9IG9wZW4oJ2FjY2Vzc190b2tlbi50eHQnLCAncicpLnJlYWQoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgbG9naW4oKQ0KICAgIHRyeToNCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPScrYWNjZXNzX3Rva2VuKS50ZXh0DQogICAgICAgIHEgPSBqc29uLmxvYWRzKHIpDQogICAgICAgIHVuYW1lID0gcVsnbmFtZSddDQogICAgZXhjZXB0Og0KICAgICAgICBsb2dpbigpDQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgcHJpbnQoYmFubmVyKQ0KICAgIG9zLnN5c3RlbSgncm0gLXJmIC5wc3kxLnR4dCcpDQogICAgb3Muc3lzdGVtKCdybSAtcmYgLnBzeTIudHh0JykNCiAgICBwcmludCgnIFwwMzNbMTs5Nm1Mb2dnZWQgdXNlciA6IFwwMzNbMTs5Mm0gICcrdW5hbWUpDQogICAgcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCiAgICBwcmludCgnICAgICAgICAgIFwwMzNbMTszMm1bIFBVQkxJQyBDTE9OSU5HIE1FTlUgQ1AvT0sgTUlYIF0gJykNCiAgICBwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KICAgIHByaW50KCdcMDMzWzE7MzdtWzFdIFwwMzNbMTszNm1QVUJMSUMgQ0xPTklORycpDQogICAgcHJpbnQoJ1wwMzNbMTszN21bMF0gXDAzM1sxOzMxbUJBQ0snKQ0KICAgIHByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQogICAgX0FkaV9fID0gaW5wdXQoJ1wwMzNbMTszN21bK10gXDAzM1sxOzMybUNIT09TRSBPUFRJT04gOiAnKQ0KICAgIGlmIF9BZGlfXyBpbiAoJzEnLCAnMDEnKToNCiAgICAgICAgX19jcmFja2luZ19fKCkucGxlcnIoKQ0KICAgIGlmIF9BZGlfXyBpbiAoJzAnLCAnMDAnKToNCiAgICAJdGltZS5zbGVlcCgyKTt2ZXJzaW9uKCkNCiAgICBlbHNlOg0KICAgIAlwcmludCgnICAgICAgICBJbnZhbGlkIFNlbGVjdCcpDQogICAgdGltZS5zbGVlcCgxKQ0KICAgIHZlcnNpb24oKSANCiAgICANCmNsYXNzIF9fY3JhY2tpbmdfXzoNCglkZWYgX19pbml0X18oc2VsZik6DQoJCXNlbGYuaWQgPSBbXQ0KCQlpZiBub3Qgb3MucGF0aC5leGlzdHMoImFjY2Vzc190b2tlbi50eHQiKToNCgkJCWxvZ2luKCkNCglkZWYgcGxlcnIoc2VsZik6DQoJCW9zLnN5c3RlbSgiY2xlYXIiKTtwcmludChiYW5uZXIpO2FjY2Vzc190b2tlbiA9IG9wZW4oJ2FjY2Vzc190b2tlbi50eHQnLCdyJykucmVhZCgpO2RpbGw9W107b3Muc3lzdGVtKCJybSAtcmYgLnB1YmxpY291dC50eHQiKQ0KCQlwcmludCgnICAgICAgICAgIFwwMzNbMTszMm1bIFBVQkxJQyBDTE9OSU5HIENQL09LIE1JWCBdICcpDQoJCXByaW50KDUwKiJcMDMzWzE7OTdtXyIpDQoJCXNlbGYuYXBrID0gaW5wdXQoIlwwMzNbMTszN21bK11cMDMzWzE7OTZtIFBVQkxJQyBJRCBcMDMzWzE7OTFtOiAgXDAzM1sxOzkybSIpDQoJCSNzZWxmLmlkID0gb3BlbignLnB1YmxpY291dC50eHQnKS5yZWFkKCkuc3BsaXRsaW5lcygpDQoJCXBwayA9ICgnLnB1YmxpY291dCcgKyAnLnR4dCcpLnJlcGxhY2UoJyAnLCAnXycpDQoJCXlzID0gb3BlbihwcGssICdhJykNCgkJcmcgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycrc2VsZi5hcGsrJy9mcmllbmRzP2xpbWl0PTUwMDAmYWNjZXNzX3Rva2VuPScrYWNjZXNzX3Rva2VuKS50ZXh0DQoJCXJncSA9IGpzb24ubG9hZHMocmcpDQoJCWlkc2F2ZT1vcGVuKCcucHVibGljb3V0LnR4dCcsICdhJykNCgkJZm9yIGluYXlhdCBpbiByZ3FbJ2RhdGEnXToNCgkJCXVpZHMgPSBpbmF5YXRbJ2lkJ10NCgkJCWRpbGwuYXBwZW5kKHVpZHMpDQoJCQlubSA9IGluYXlhdFsnbmFtZSddDQoJCQlmaXJzdF9uYW1lID0gbm0uc3BsaXQoJyAnKVswXQ0KCQkJdHJ5Og0KCQkJCWxhc3RfbmFtZSA9IG5tLnNwbGl0KCcgJylbMV0NCgkJCWV4Y2VwdDoNCgkJCQlsYXN0X25hbWUgPSAnS2hhbicNCgkJCWlkc2F2ZS53cml0ZSh1aWRzKyd8JytmaXJzdF9uYW1lKycgJytsYXN0X25hbWUrJ1xuJykNCgkJc2VsZi5fX3BsZXJfXygpDQoJZGVmIF9fbWJhc2ljX18oc2VsZiwgdXNlciwgX3NlbXBha18pOg0KCQlnbG9iYWwgb2ssY3AsbG9vcA0KCQlzeXMuc3Rkb3V0LndyaXRlKGYiXHIgXHgxYlsxOzk3bVtcMDMzWzE7MzZtQWRpXDAzM1sxOzM3bV0ge2xvb3B9L3tsZW4oc2VsZi5pZCl9IFwwMzNbMTszN21bXDAzM1sxOzM2bVRPVEFMLUlkelwwMzNbMTszN21dIFwwMzNbMTszN21bXDAzM1sxOzM2bXtsZW4ob2spfVwwMzNbMTszN21dIikNCgkJc3lzLnN0ZG91dC5mbHVzaCgpDQoJCWZvciBwdyBpbiBfc2VtcGFrXzoNCgkJCXB3ID0gcHcubG93ZXIoKQ0KCQkJdHJ5OiBvcy5ta2RpcignJykNCgkJCWV4Y2VwdDogcGFzcw0KCQkJdHJ5Og0KCQkJCXBzeWFnZW50cyA9IHJhbmRvbS5jaG9pY2UobGluZXJzKQ0KCQkJZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQoJCQkJcHN5YWdlbnRzICA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJBTi9FTUE7RkJMQy9pZF9JRDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQoJCQlzZXMgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCgkJCWhlYWRlcnNfID0geyJIb3N0IjoibWJhc2ljLmZhY2Vib29rLmNvbSIsInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwidXNlci1hZ2VudCI6Ik5va2lhQzMtMDAvNS4wICgwOC42MykgUHJvZmlsZS9NSURQLTIuMSBDb25maWd1cmF0aW9uL0NMREMtMS4xIE1vemlsbGEvNS4wIEFwcGxlV2ViS2l0LzQyMCsgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYWZhcmkvNDIwKyIsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCpbaW5zZXJ0ZWQgYnkgY3l0aG9uIHRvIGF2b2lkIGNvbW1lbnQgY2xvc2VyXS9baW5zZXJ0ZWQgYnkgY3l0aG9uIHRvIGF2b2lkIGNvbW1lbnQgc3RhcnRdKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsImRudCI6IjEiLCJ4LXJlcXVlc3RlZC13aXRoIjoibWFyay52aWEuZ3AiLCJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwic2VjLWZldGNoLW1vZGUiOiJjb3JzIiwic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLCJyZWZlcmVyIjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tLyIsImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLCJhY2NlcHQtbGFuZ3VhZ2UiOiJlbi1HQixlbi1VUztxPTAuOSxlbjtxPTAuOCJ9DQoJCQlwID0gc2VzLmdldCgnaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2luZGV4LnBocD9uZXh0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVycy5mYWNlYm9vay5jb20lMkZ0b29scyUyRmRlYnVnJTJGYWNjZXNzdG9rZW4lMkYnLCBoZWFkZXJzPWhlYWRlcnNfKS50ZXh0DQoJCQlkYXRhYSA9IHsibHNkIjpyZS5zZWFyY2goJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsIHN0cihwKSkuZ3JvdXAoMSksImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihwKSkuZ3JvdXAoMSksInVpZCI6dXNlciwiZmxvdyI6ImxvZ2luX25vX3BpbiIsInBhc3MiOnB3LCJuZXh0IjoiaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9kZWJ1Zy9hY2Nlc3N0b2tlbi8ifQ0KCQkJX2hlYWRlcnMgPSB7Ikhvc3QiOiJtYmFzaWMuZmFjZWJvb2suY29tIiwiY2FjaGUtY29udHJvbCI6Im1heC1hZ2U9MCIsInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwib3JpZ2luIjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tIiwiY29udGVudC10eXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwidXNlci1hZ2VudCI6Ik1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMjsgU0FNU1VORyBTTS1HNzgwRykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgU2Ftc3VuZ0Jyb3dzZXIvMTYuMCBDaHJvbWUvOTIuMC40NTE1LjE2NiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCpbaW5zZXJ0ZWQgYnkgY3l0aG9uIHRvIGF2b2lkIGNvbW1lbnQgY2xvc2VyXS9baW5zZXJ0ZWQgYnkgY3l0aG9uIHRvIGF2b2lkIGNvbW1lbnQgc3RhcnRdKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsIngtcmVxdWVzdGVkLXdpdGgiOiJtYXJrLnZpYS5ncCIsInNlYy1mZXRjaC1zaXRlIjoic2FtZS1vcmlnaW4iLCJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLCJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5Iiwic2VjLWZldGNoLWRlc3QiOiJkb2N1bWVudCIsInJlZmVyZXIiOiJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vaW5kZXgucGhwP25leHQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXJzLmZhY2Vib29rLmNvbSUyRnRvb2xzJTJGZGVidWclMkZhY2Nlc3N0b2tlbiUyRiIsImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLCJhY2NlcHQtbGFuZ3VhZ2UiOiJlbi1HQixlbi1VUztxPTAuOSxlbjtxPTAuOCJ9DQoJCQlwbyA9IHNlcy5wb3N0KCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vbG9naW4vZGV2aWNlLWJhc2VkL3ZhbGlkYXRlLXBhc3N3b3JkLz9zaGJsPTAiLCBkYXRhID0gZGF0YWEsIGhlYWRlcnM9X2hlYWRlcnMsIGFsbG93X3JlZGlyZWN0cyA9IEZhbHNlKQ0KCQkJaWYgJ2NfdXNlcicgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKToNCgkJCQlwcmludCgnXHJcMDMzWzE7MzdtW1wwMzNbMTszMm1CSFQtT0tcMDMzWzE7MzdtXVwwMzNbMTszMm0gJXMgfCAlcyAgICAgICcgJSAodXNlcixwdykpDQoJCQkJd3J0ID0gJyVzIC0gJXMnICUgKHVzZXIscHcpDQoJCQkJb2suYXBwZW5kKHdydCkNCgkJCQlvcGVuKCdvay50eHQnLCdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KCQkJCWJyZWFrDQoJCQllbGlmICdjaGVja3BvaW50JyBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpOg0KCQkJCXByaW50KCdcclwwMzNbMTszMW1bXDAzM1sxOzMwbUJIVC1DUFwwMzNbMTszMW1dXDAzM1sxOzMwbSAlcyB8ICVzICAgICAgJyAlICh1c2VyLHB3KSkNCgkJCQl3cnQgPSAnJXMgLSAlcycgJSAodXNlcixwdykNCgkJCQlvay5hcHBlbmQod3J0KQ0KCQkJCW9wZW4oJ2NwLnR4dCcsJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQoJCQkJYnJlYWsNCgkJCWVsc2U6DQoJCQkJY29udGludWUNCgkJbG9vcCArPSAxDQoJZGVmIF9fcGxlcl9fKHNlbGYpOg0KCQlzZWxmLmlkID0gb3BlbignLnB1YmxpY291dC50eHQnLCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQ0KCQlvcy5zeXN0ZW0oImNsZWFyIik7cHJpbnQoYmFubmVyKTt0aW1lLnNsZWVwKDEpDQoJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzMzbSBQVUJMSUMgQ0xPTklORyBDUC9PSyBJRFMgTUlYICcpDQoJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzM2bSBUT1RBTCBJRFMgXDAzM1sxOzkxbTogXDAzM1sxOzMybSVzICcgJSBsZW4oc2VsZi5pZCkpDQoJCXByaW50KCdcMDMzWzE7MzdtWytdXDAzM1sxOzM2bSBQUk9DRVNTIEhBUyBCRUVOIFNUQVJURUQnKQ0KCQlwcmludCg1MCoiXDAzM1sxOzM3bV8iKQ0KCQlwcmludCgnICAgICAgXDAzM1sxOzk3bVwwMzNbMTs0MW0gWyBJRiAgTk8gUkVTVUxUIFVTRSBBSVJQTEFORSBNT0RFIF0gXDAzM1swbVwwMzNbMTs5M20nKQ0KCQlwcmludCg1MCoiXDAzM1sxOzM3bV8iKQ0KCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0yMCkgYXMgKF9uZ2VudG90X2dyYXRpc18pOg0KCQkJZm9yIHludGt0cyBpbiBzZWxmLmlkOg0KCQkJCXRyeToNCgkJCQkJdWlkLCBuYW1lID0geW50a3RzLnNwbGl0KCd8JykNCgkJCQkJeHogPSBuYW1lLnNwbGl0KCcgJykNCgkJCQkJaWYgbGVuKHh6KSA9PSAxOg0KCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rJzc4NicsIHh6WzBdK3h6WzBdKycxMjM0J10NCgkJCQkJZWxpZiBsZW4oeHopID09IDI6DQoJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNDUiLCB4elswXSsnNzg2JywgeHpbMF0reHpbMF0rJzEyMzQnXQ0KCQkJCQllbGlmIGxlbih4eikgPT0gMzoNCgkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0NSIsIHh6WzBdKyc3ODYnLCB4elswXSt4elswXSsnMTIzNCddDQoJCQkJCWVsaWYgbGVuKHh6KSA9PSA0Og0KCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rJzc4NicsIHh6WzBdK3h6WzBdKycxMjM0J10NCgkJCQkJZWxzZToNCgkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0NSIsIHh6WzBdKyc3ODYnLCB4elswXSt4elswXSsnMTIzNCddDQoJCQkJCV9uZ2VudG90X2dyYXRpc18uc3VibWl0KHNlbGYuX19tYmFzaWNfXywgdWlkLCBwd3gpDQoJCQkJZXhjZXB0Og0KCQkJCQlwYXNzDQoJCWhhc2lsKG9rLGNwKQ0KCQkNCmRlZiBjcmVhdGVfZmlsZSgpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpDQogICAgb3Muc3lzdGVtKCdybSAtcmYgYWRpMS50eHQnKQ0KICAgIHRyeToNCiAgICAgICAgYWNjZXNzX3Rva2VuID0gb3BlbignYWNjZXNzX3Rva2VuLnR4dCcsICdyJykucmVhZCgpDQogICAgZXhjZXB0Og0KICAgICAgICBsb2dpbigpDQogICAgdHJ5Og0KICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZT9hY2Nlc3NfdG9rZW49JythY2Nlc3NfdG9rZW4pLnRleHQNCiAgICAgICAgcSA9IGpzb24ubG9hZHMocikNCiAgICAgICAgdW5hbWUgPSBxWyduYW1lJ10NCiAgICBleGNlcHQ6DQogICAgICAgIGxvZ2luKCkNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBwcmludChiYW5uZXIpDQogICAgb3Muc3lzdGVtKCdybSAtcmYgLnBzeTEudHh0JykNCiAgICBvcy5zeXN0ZW0oJ3JtIC1yZiAucHN5Mi50eHQnKQ0KICAgIHByaW50KCcgXDAzM1sxOzk2bUxvZ2dlZCB1c2VyIDogXDAzM1sxOzkybSAgJyt1bmFtZSkNCiAgICBwcmludCg1MCoiXDAzM1sxOzk3bV8iKQ0KICAgIG51c3JhdCA9IFtdDQogICAgdHJ5Og0KICAgICAgICBsaW1pdF91c2VyID0gMQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgbGltaXRfdXNlciA9IDENCiAgICBjb3VudCA9IDANCiAgICBmb3IgZmlyIGluIHJhbmdlKGxpbWl0X3VzZXIpOg0KICAgICAgICBjb3VudCArPTENCiAgICAgICAgdWRpdCA9IGlucHV0KCcgXDAzM1sxOzM3bVtcMDMzWzE7MzJtJXNcMDMzWzE7MzdtXSBcMDMzWzE7MzZtSU5QVVQgSUQgXDAzM1sxOzMxbTogXDAzM1sxOzMybSclKGNvdW50KSkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgdGZpbGUgPSBvcGVuKCdhY2Nlc3NfdG9rZW4udHh0JywncicpLnJlYWQoKQ0KICAgICAgICAgICAgZnIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycrdWRpdCsnL2ZyaWVuZHM/bGltaXQ9NTAwMCZhY2Nlc3NfdG9rZW49Jyt0ZmlsZSkudGV4dA0KICAgICAgICAgICAgcWZyID0ganNvbi5sb2FkcyhmcikNCiAgICAgICAgICAgIHRlbXBfc2F2ZSA9IG9wZW4oJy5wc3kxLnR4dCcsICdhJykNCiAgICAgICAgICAgIGZvciBkYXRhIGluIHFmclsnZGF0YSddOg0KICAgICAgICAgICAgICAgIHVpZHMgPSBkYXRhWydpZCddDQogICAgICAgICAgICAgICAgaWYgdWlkcyBpbiBudXNyYXQ6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBudXNyYXQuYXBwZW5kKHVpZHMpDQogICAgICAgICAgICAgICAgICAgIHRlbXBfc2F2ZS53cml0ZSh1aWRzKydcbicpDQogICAgICAgICAgICB0ZW1wX3NhdmUuY2xvc2UoKQ0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICBpZiAnaW52YWxpZCcgaW4gc3RyKGZyKToNCiAgICAgICAgICAgICAgICBwcmludCgnICBMb2dnZWQgdG9rZW4gaGFzIGV4cGlyZWQgLi4uJykNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHByaW50KHVkaXQrJ0ZyaWVuZCBJcyBQcml2YXRlICcpDQogICAgICAgICAgICAgICAgcGFzcw0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIHByaW50KGJhbm5lcikNCiAgICBwcmludCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszNm0gVE9UQUwgSURTIFwwMzNbMTszMW06XDAzM1sxOzkybSAnK3N0cihsZW4obnVzcmF0KSkpDQogICAgcHJpbnQoNTAqIlwwMzNbMTs5N21fIikNCiAgICB0cnk6DQogICAgICAgIGFza19saW5rID0gMQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgYXNrX2xpbmsgPSAxDQogICAgY29tcGxldGVkID0gMA0KICAgIGZvciBsaW5rcyBpbiByYW5nZShhc2tfbGluayk6DQogICAgICAgIGNvbXBsZXRlZCArPTENCiAgICAgICAgbGkgPSAoJzEnKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2NhdCAuYWRpMS50eHQgfCBncmVwICcrbGkrJyA+PiAucHN5Mi50eHQnKQ0KICAgICAgICANCiAgICBzYXZlX2ZpbGUgPSBpbnB1dCgnXDAzM1sxOzM3bVsrXVwwMzNbMTszM20gRVhBTVBMRSBcMDMzWzE7MzFtOiBcMDMzWzE7MzZtL3NkY2FyZC9maWxlbmFtZS50eHRcblwwMzNbMTszN21bK11cMDMzWzE7MzZtIFNBVkUgRklMRSBBUyBcMDMzWzE7MzFtOiBcMDMzWzE7MzJtJykNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBsaW5lcyA9IG9wZW4oJy5hZGkyLnR4dCcsICdyJykucmVhZGxpbmVzKCkNCiAgICBwcmludChiYW5uZXIpDQogICAgcHJpbnQoJ1wwMzNbMTszN21bK10gXDAzM1sxOzk2bVRPVEFMIElEUyBcMDMzWzE7MzFtOiBcMDMzWzE7OTJtJytzdHIobGVuKGxpbmVzKSkpDQogICAgcHJpbnQoJ1wwMzNbMTszN21bK10gXDAzM1sxOzk2bVdBSVQgQ09MTEVDVElORyBJRFMgJykNCiAgICBwcmludCg1MCoiXDAzM1sxOzM3bV8iKQ0KICAgIGZpbGVpZCA9ICcucHN5LnR4dCcNCiAgICBmaWxlaWRvcGVuID0gb3BlbihmaWxlaWQsICdyJykucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgIGRpbGwgPSBbXQ0KICAgIGZvciBpZHMgaW4gZmlsZWlkb3BlbjoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgdGZpbGUgPSBvcGVuKCdhY2Nlc3NfdG9rZW4udHh0JywncicpLnJlYWQoKQ0KICAgICAgICAgICAgcmcgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycraWRzKycvZnJpZW5kcz9saW1pdD01MDAwJmFjY2Vzc190b2tlbj0nK3RmaWxlKS50ZXh0DQogICAgICAgICAgICByZ3EgPSBqc29uLmxvYWRzKHJnKQ0KICAgICAgICAgICAgaWRzYXZlPW9wZW4oc2F2ZV9maWxlLCAnYScpDQogICAgICAgICAgICBmb3IgaW5heWF0IGluIHJncVsnZGF0YSddOg0KICAgICAgICAgICAgICAgIHVpZHMgPSBpbmF5YXRbJ2lkJ10NCiAgICAgICAgICAgICAgICBkaWxsLmFwcGVuZCh1aWRzKQ0KICAgICAgICAgICAgICAgIG5tID0gaW5heWF0WyduYW1lJ10NCiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lID0gbm0uc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lID0gbm0uc3BsaXQoJyAnKVsxXQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lID0gJ0toYW4nDQogICAgICAgICAgICAgICAgaWRzYXZlLndyaXRlKHVpZHMrJ3wnK2ZpcnN0X25hbWUrJyAnK2xhc3RfbmFtZSsnXG4nKQ0KICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5N20gW1wwMzNbMTszMm1CSC1URUFNXDAzM1sxOzM3bV0gXDAzM1sxOzM2bVNVQ0NFU1NGVUxMIERVTVAgRlJPTVwwMzNbMTszN20gJytpZHMpDQogICAgICAgICAgICBpZHNhdmUuY2xvc2UoKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgIA0KICAgICAgICAgICAgaWYgJ2ludmFsaWQnIGluIHN0cihyZyk6DQogICAgICAgICAgICAgICAgcHJpbnQoJyAgVG9rZW4gaGFzIGV4cGlyZWQsIHRyeSBhZ2FpbiAuLi4nKQ0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIC5wc3kxLnR4dCcpDQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzkxbUZpZWxkIEVycm9yIFNvbWV0aGluZyBXcm9uZ1wwMzNbMG0nKQ0KICAgICAgICAgICAgICAgIHByaW50KDU0KiJfIikNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiAucHN5MS50eHQnKQ0KICAgICAgICAgICAgICAgIHBhc3MNCiAgICBsZW5pZCA9IG9wZW4oc2F2ZV9maWxlLCAncicpLnJlYWRsaW5lcygpDQogICAgcHJpbnQoJ1wwMzNbMTszN21bK11cMDMzWzE7MzZtIFBST0NFU1MgQ09NUExFVEVEICAnKQ0KICAgIG9zLnN5c3RlbSgncm0gLXJmIC5hZGkxLnR4dCcpDQogICAgcHJpbnQoJ1wwMzNbMTszN21bK10gXDAzM1sxOzM2bVRPVEFMIElEUyAgXDAzM1sxOzMxbTogXDAzM1sxOzMybScrc3RyKGxlbihsZW5pZCkpKQ0KICAgIHByaW50KCdcMDMzWzE7MzdtWytdIFwwMzNbMTszNm1GSUxFIFNBVkVEIEFTIFwwMzNbMTszMW06IFwwMzNbMTszMm0nK3NhdmVfZmlsZSkNCiAgICBpbnB1dCgnXDAzM1sxOzM3bVsrXSBcMDMzWzE7MzZtUFJFU1MgRU5URVIgVE8gQkFDSyAnKQ0KICAgIHZlcnNpb24oKQ0KaWYgbm90IG9zLnBhdGguZXhpc3RzKCIucHN5d29yay50eHQiKToNCglvcGVuKCIucHN5d29yay50eHQiLCAndycpLmNsb3NlKCkNCmNsYXNzIGxvYWQ6DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBfID0gJycNCiAgICAgICAgX18gPSBpbnQoJzMwJykNCiAgICAgICAgX19fID0gaW50KCcwJykNCiAgICAgICAgX18gLT0gMQ0KICAgICAgICBfX18gKz0gMQ0KICAgICAgICBmb3IgdCBpbiByYW5nZShpbnQoIjEiKSk6DQogICAgICAgICAgICBwcmludCgnXHIgTG9hZGluZyAuLi4nKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMSkNCiAgICAgICAgcHJpbnQoJ1xuJykNCmJhbm5lciA9ICIiIg0KXDAzM1s5MzsxbSAgX19fXyAgICAgICAgXyAgICBfICAgX19fX19fXyBfX19fX18gICAgICAgICAgX18gIF9fIA0KXDAzM1sxOzMybSB8ICBfIFwgICAgICB8IHwgIHwgfCB8X18gICBfX3wgIF9fX198ICAgL1wgICB8ICBcLyAgfA0KXDAzM1s5MTsxbSB8IHxfKSB8X19fX198IHxfX3wgfCAgICB8IHwgIHwgfF9fICAgICAvICBcICB8IFwgIC8gfA0KXDAzM1s5NTsxbSB8ICBfIDxfX19fX198ICBfXyAgfCAgICB8IHwgIHwgIF9ffCAgIC8gL1wgXCB8IHxcL3wgfA0KXDAzM1s5NDsxbSB8IHxfKSB8ICAgICB8IHwgIHwgfCAgICB8IHwgIHwgfF9fX18gLyBfX19fIFx8IHwgIHwgfA0KXDAzM1s5MzsxbSB8X19fXy8gICAgICB8X3wgIHxffCAgICB8X3wgIHxfX19fX18vXy8gICAgXF9cX3wgIHxffCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgIA0KXDAzM1swOzk1beKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KXDAzM1swOzk0bSBbIV1cMDMzWzA7OTFtVE9PTCBPV0VSIDpcMDMzWzA7OTJt8J2QgfCdkIMg8J2QifCdkIDwnZCH8J2QiPCdkITwnZCDICAgICAgIA0KXDAzM1swOzk0bSBbIV1cMDMzWzA7OTFtVE9PTCBOQU1FIDpcMDMzWzA7OTJtIPCdkI/wnZCR8J2Qji3wnZCF8J2QiPCdkJHwnZCEDQpcMDMzWzA7OTRtIFshXVwwMzNbMDs5MW1WRVJTSU9OICAgOlwwMzNbMDs5Mm0zLjAuNQ0KXDAzM1swOzk0bSBbIV1cMDMzWzA7OTFtR1JPVVAgICAgIDpcMDMzWzA7OTJt8J2QgfCdkIvwnZCA8J2QgvCdkIog8J2Qh/CdkJTwnZCN8J2Qk/CdkITwnZCRIPCdkJPwnZCE8J2QgPCdkIwNClwwMzNbMDs5NW3ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiIiINCmN0ID0gZGF0ZXRpbWUubm93KCkNCm4gPSBjdC5tb250aA0KbW9udGhzeCA9IFsiSmFudWFyeSIsICJGZWJydWFyeSIsICJNYXJjaCIsICJBcHJpbCIsICJNYXkiLCAiSnVuZSIsICJKdWx5IiwgIkF1Z3VzdCIsICJTZXB0ZW1iZXIiLCAiT2N0b2JlciIsICJOb3ZlbWJlciIsICJEZWNlbWJlciJdDQp0cnk6DQoJaWYgbiA8IDAgb3IgbiA+IDEyOg0KCQlleGl0KCkNCgluVGVtcCA9IG4gLSAxDQpleGNlcHQgVmFsdWVFcnJvcjoNCglleGl0KCkNCnVybHM9Imh0dHBzOi8vYnVzaW5lc3MuZmFjZWJvb2suY29tL2J1c2luZXNzX2xvY2F0aW9ucyINCl9zZXM9cmVxdWVzdHMuU2Vzc2lvbigpDQoNCg0KaWYgX19uYW1lX189PSdfX21haW5fXyc6DQoJb3Muc3lzdGVtKCdnaXQgcHVsbCcpDQoJbWFpbigpDQo="))